// Ex 3 day 4 - Methods. Converting binary to decimal and vice-versa

//power(int, int): Takes a base b and an exponent e from the user, and returns the result of be.
//power2(int): Takes an exponent e from the user and returns the result of 2e. This method must call the previous one to find out the result.


// Define method power (see powerresult.jdc for unit test)


// Switch-choice statement goes here, which calls correct method depending on the choice

println ("Please choose which operation you would like to perform:");
println ("For Binary to Decimal please enter 1"); 
println ("For Decimal to Binary please enter 2");
int choice = 1;

switch (choice) {
case 1:
// Binary to Decimal
	println ("Please enter a binary number to convert to a decimal number");
	String myBinary = readLine();
	println(binary2decimal(myBinary));
   	break;
 case 2:
// Decimal to Binary
	println ("Please enter a decimal number to convert to a binary number");
	int myDecimal = readInt();
	decimal2binary(myDecimal);
	println(decimal2binary(myDecimal));
	break;
default:
// default error message
	println ("Something has gone wrong!");
	break;
}

int getPower(int base, int exponent){ 			// getPower returns base ^ exponent (as int) - good practice to name methods as verbs
	int result = -1;						
	int j=0;
	
	if (exponent !=0) {							// calculation below only works if exp !=0
	 	for (j=0; j<exponent; j++) {
			result = (result * base);
			println(result); 					
        }
	} else {
		result = 1;								//result = 1 if exp = 0
	}											
	return result;								
} 				

// Define method getPower2

int getPower2 (int exponent) {
	int result = -1;					
	result = getPower(2, exponent);			
	println(result);
	return result;
}

// Define method binary2decimal(String) - takes a string binary as input and returns a decimal int

int binary2decimal(String binarystr) {
	
	int binaryLeng = binarystr.length(); 										
	int pos = 0;
	int binaryDigit = 0;
	int result = 0;
	
	for (pos = (binaryLeng-1); pos >=0; pos--) {
		char bin = binarystr.charAt(pos);				//char c = str.charAt(0) OR can concatenate "" to c and get a string
		binaryDigit = Character.getNumericValue(bin);   //binaryDigit = 0 or 1. At this point I have a string of 0s or 1s in the right order to do the decimal computation
	}													// e.g. if I had 1010 I now have 0, 1, 0, 1
	
	for (pos = 0; pos > binaryLeng-1; pos++) {
		result = result + getPower2(pos)*binaryDigit;	// Calculate power 2 of each position and multiply by the digit at each place
	}
	return result;
}
				
// Define method decimal2binary(int) - takes a decimal integer and returns a string binary - requires an integer parameter

String decimal2binary (int decimal) {
	
	int binaryremainder = 0;
	int binaryquotient = 0;
	String result = "";
	
	while (binaryquotient >=2) {
	
		binaryquotient = decimal /2;      //because it's defined as an int it will only remember the nearest whole number
		binaryremainder = decimal %2;
		String binarydigit = Integer.toString(binaryremainder);
		result = result + binarydigit;
	}	
	return result;	
}	

	
	



